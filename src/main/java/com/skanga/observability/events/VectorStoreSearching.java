package com.skanga.observability.events;

import com.skanga.chat.messages.Message;

import java.util.*;

/**
 * Event data for when a RAG (Retrieval Augmented Generation) agent initiates
 * a similarity search operation in a vector store.
 *
 * @param vectorStoreName The class name or a unique identifier of the {@link com.skanga.rag.vectorstore.VectorStore}
 *                        implementation being queried (e.g., "MemoryVectorStore", "ChromaVectorStore"). Must not be null.
 * @param queryMessage    The user's query {@link Message} that triggered this vector store search.
 *                        Must not be null. The content of this message is typically used to generate the query embedding.
 * @param queryEmbedding  The vector embedding of the query text. This can be null if the embedding
 *                        is generated by the vector store itself (less common for this event, as embedding
 *                        often happens just before this) or if logging the full embedding is undesirable.
 *                        A defensive copy is made if provided.
 * @param topK            The number of top similar documents requested from the vector store.
 * @param filter          A map representing any filters applied to the vector store search
 *                        (e.g., metadata filters). The structure of this map is dependent on the
 *                        vector store's capabilities. Can be null or empty if no filters are applied.
 *                        A defensive copy is made.
 */
public record VectorStoreSearching(
    String vectorStoreName,
    Message queryMessage,
    List<Float> queryEmbedding,
    int topK,
    Map<String, Object> filter
) {
    /**
     * Canonical constructor for VectorStoreSearching.
     * Ensures vectorStoreName and queryMessage are not null.
     * Makes defensive copies of mutable collections.
     */
    public VectorStoreSearching {
        Objects.requireNonNull(vectorStoreName, "vectorStoreName cannot be null for VectorStoreSearching event.");
        Objects.requireNonNull(queryMessage, "queryMessage cannot be null for VectorStoreSearching event.");
        if (topK <= 0) {
            throw new IllegalArgumentException("topK must be positive for VectorStoreSearching event.");
        }
        queryEmbedding = (queryEmbedding != null) ? Collections.unmodifiableList(new ArrayList<>(queryEmbedding)) : null;
        filter = (filter != null) ? Collections.unmodifiableMap(new HashMap<>(filter)) : null;
    }

    /**
     * Convenience constructor for when query embedding or filters are not being logged at this stage.
     * @param vectorStoreName Name of the vector store.
     * @param queryMessage The initiating query message.
     * @param topK The number of results requested.
     */
    public VectorStoreSearching(String vectorStoreName, Message queryMessage, int topK) {
        this(vectorStoreName, queryMessage, null, topK, null);
    }
}
