package com.skanga.core;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents token usage information for an AI interaction, typically returned by AI providers.
 * This record is immutable.
 *
 * @param promptTokens     The number of tokens used by the input prompt.
 * @param completionTokens The number of tokens generated by the AI model as the completion/response.
 * @param totalTokens      The total number of tokens used (often sum of prompt and completion,
 *                         but can be provided separately by some models).
 */
public record Usage(
    @JsonProperty("prompt_tokens") int promptTokens,
    @JsonProperty("completion_tokens") int completionTokens,
    @JsonProperty("total_tokens") int totalTokens
) {

    /**
     * Canonical constructor for Jackson deserialization and manual creation.
     * @param promptTokens Number of prompt tokens.
     * @param completionTokens Number of completion tokens.
     * @param totalTokens Total tokens.
     */
    @JsonCreator // Indicates this constructor can be used by Jackson
    public Usage(@JsonProperty("prompt_tokens") int promptTokens,
                 @JsonProperty("completion_tokens") int completionTokens,
                 @JsonProperty("total_tokens") int totalTokens) {
        this.promptTokens = promptTokens;
        this.completionTokens = completionTokens;
        this.totalTokens = totalTokens;
    }


    /**
     * Combines this Usage instance with another Usage instance by summing their token counts.
     *
     * @param other The other {@link Usage} instance to add. If null, this instance is returned.
     * @return A new {@link Usage} instance representing the sum of token counts.
     */
    public Usage plus(Usage other) {
        if (other == null) return this;
        return new Usage(
            this.promptTokens + other.promptTokens,
            this.completionTokens + other.completionTokens,
            this.totalTokens + other.totalTokens
        );
    }

    /**
     * Returns a Usage instance representing zero tokens.
     * @return An empty {@link Usage} object.
     */
    public static Usage empty() {
        return new Usage(0, 0, 0);
    }
}
